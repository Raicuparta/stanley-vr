using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using System;

namespace LIV.SDK.Unity
{
    public class SDKFont : IDisposable
    {
        const int ASCIIOffset = -32;
        const TextureFormat textureFormat = TextureFormat.Alpha8;
        const int fontWidth = 126;
        const int fontHeight = 54;
        const int charsH = 18;
        const int charsV = 6;
        static readonly byte[] data = {
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
  0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x36, 0x01, 0x03, 0x00, 0x00, 0x00, 0x3b, 0xe6, 0xbf,
  0xca, 0x00, 0x00, 0x00, 0x06, 0x50, 0x4c, 0x54, 0x45, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xa5,
  0xd9, 0x9f, 0xdd, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x13, 0x00,
  0x00, 0x0b, 0x13, 0x01, 0x00, 0x9a, 0x9c, 0x18, 0x00, 0x00, 0x01, 0xf8, 0x49, 0x44, 0x41, 0x54,
  0x28, 0xcf, 0x8d, 0x93, 0x41, 0x6b, 0x13, 0x41, 0x14, 0xc7, 0xdf, 0x4c, 0x16, 0x3b, 0x29, 0xba,
  0x99, 0x5d, 0x5b, 0xec, 0x61, 0x59, 0xa6, 0xd3, 0x85, 0x06, 0x6f, 0x7a, 0xca, 0x41, 0xca, 0x24,
  0x19, 0x31, 0x07, 0xa1, 0x22, 0x7e, 0x00, 0xc5, 0x7e, 0x80, 0xe0, 0x69, 0x0b, 0x7b, 0xd8, 0x2c,
  0x81, 0xdd, 0x15, 0xac, 0x6c, 0x2e, 0xde, 0xb4, 0xf5, 0xa4, 0x1f, 0xc3, 0x36, 0x90, 0x8b, 0x5f,
  0xa0, 0xb7, 0xa4, 0x2a, 0x3d, 0x97, 0x5e, 0xd2, 0x9b, 0x6f, 0xb6, 0x15, 0x4c, 0x72, 0x68, 0xde,
  0xe9, 0xcd, 0x8f, 0xff, 0xfc, 0xdf, 0x7f, 0x78, 0x0c, 0xc0, 0x42, 0x89, 0xa3, 0xe6, 0x5d, 0x9b,
  0x31, 0x55, 0x1e, 0x1a, 0xc2, 0x80, 0xf6, 0xcf, 0x01, 0xe3, 0x9b, 0x2f, 0x62, 0x00, 0xaa, 0x5f,
  0x23, 0xa8, 0xfc, 0x21, 0x6b, 0x20, 0xf8, 0x18, 0x81, 0xf5, 0xfc, 0x10, 0x01, 0x69, 0x27, 0x0c,
  0x84, 0x73, 0x39, 0xae, 0xc5, 0xec, 0x95, 0xb9, 0x52, 0x99, 0xe8, 0x75, 0xa3, 0xe8, 0x01, 0xf0,
  0x3d, 0x04, 0x40, 0x9e, 0xe5, 0x03, 0x40, 0x0f, 0x04, 0x42, 0x1b, 0x05, 0x69, 0x92, 0x0f, 0x80,
  0x53, 0x28, 0x58, 0xd0, 0x98, 0xc2, 0xed, 0xd5, 0xe8, 0xbe, 0xfd, 0xf5, 0xf1, 0xc0, 0x33, 0xed,
  0x8a, 0xed, 0x85, 0x5d, 0xd0, 0xd9, 0x57, 0x0b, 0x0a, 0xc9, 0x85, 0xa0, 0xac, 0x90, 0x3a, 0x03,
  0xab, 0x2a, 0x2d, 0xe2, 0x48, 0x80, 0xf6, 0x84, 0x7d, 0x92, 0x3a, 0x06, 0xf6, 0xe8, 0x72, 0x94,
  0xd8, 0x3e, 0x40, 0x0c, 0xbd, 0xf5, 0x9d, 0x30, 0x06, 0xce, 0x44, 0xa0, 0x1d, 0x0a, 0xa2, 0x3d,
  0xa1, 0x0f, 0x8c, 0x42, 0x64, 0x25, 0x30, 0x1e, 0xc0, 0x8d, 0x47, 0xd4, 0xdd, 0x3a, 0xe9, 0xdb,
  0x1e, 0xe0, 0xf3, 0xa9, 0x2d, 0x71, 0xca, 0xed, 0x15, 0x5e, 0x5d, 0x0c, 0x77, 0xbf, 0x48, 0x95,
  0x3b, 0xa3, 0xd4, 0xf7, 0xa3, 0x0c, 0x74, 0x8f, 0x06, 0x2d, 0x22, 0xd5, 0xa9, 0x1b, 0x74, 0x0a,
  0xc1, 0x4b, 0x60, 0xb5, 0x48, 0xa0, 0xbe, 0x0f, 0xfe, 0x81, 0x8b, 0xb3, 0x95, 0x63, 0xd2, 0x50,
  0xf9, 0xcb, 0xed, 0xec, 0xb3, 0x77, 0xad, 0xd8, 0x33, 0x8a, 0xfc, 0x71, 0xb0, 0x5a, 0x50, 0x7e,
  0xe3, 0xe1, 0xa0, 0xa9, 0x1b, 0x54, 0x1d, 0x03, 0xc2, 0x2b, 0x32, 0xdc, 0x3d, 0x90, 0x51, 0xee,
  0x0c, 0xef, 0x14, 0x4f, 0xf8, 0x32, 0xc1, 0x74, 0xee, 0x6e, 0x9f, 0xc0, 0x06, 0x87, 0xd8, 0x02,
  0x02, 0x1b, 0x25, 0x10, 0x2d, 0xce, 0xea, 0xa0, 0x0c, 0xc0, 0x2d, 0xe8, 0xec, 0x48, 0x25, 0x8c,
  0xe1, 0x7a, 0x46, 0x69, 0xcd, 0x8b, 0x42, 0x04, 0x0a, 0xb3, 0x22, 0x00, 0x4c, 0x2a, 0x05, 0xe6,
  0xf8, 0x76, 0x98, 0x50, 0x6a, 0x14, 0xbf, 0x3b, 0xce, 0x8e, 0x08, 0xa1, 0x7e, 0xca, 0xfb, 0x94,
  0x20, 0xa0, 0xe6, 0x2d, 0x82, 0x01, 0xcf, 0x79, 0x8a, 0x53, 0x60, 0x4a, 0xce, 0xd3, 0x9a, 0x2f,
  0x96, 0x09, 0xa6, 0x84, 0x6b, 0x5d, 0x77, 0xf4, 0x06, 0x00, 0x9d, 0x05, 0xe1, 0xf8, 0x9d, 0xbe,
  0xe7, 0x7b, 0xe1, 0xfe, 0x9b, 0xf3, 0xac, 0xdc, 0xad, 0x16, 0xf7, 0xfb, 0xab, 0xd8, 0xe5, 0x03,
  0xb3, 0xec, 0xba, 0x01, 0xae, 0x46, 0x10, 0xee, 0x93, 0x63, 0x04, 0x1c, 0xa3, 0x6f, 0xba, 0x01,
  0x76, 0xaa, 0x0a, 0xb2, 0xf3, 0xfe, 0x61, 0x9d, 0x81, 0x9e, 0x9e, 0x6d, 0x65, 0x85, 0xa7, 0xaa,
  0x95, 0x1f, 0x69, 0x7f, 0x4d, 0x2f, 0x13, 0x0c, 0x78, 0x73, 0xfe, 0x37, 0xa8, 0x78, 0xe6, 0x1c,
  0x09, 0x95, 0xa8, 0xff, 0x01, 0x53, 0xea, 0xe9, 0x8c, 0x84, 0xcf, 0x5f, 0x11, 0x0b, 0x1e, 0x0b,
  0x53, 0xe6, 0xea, 0x2f, 0xe3, 0xeb, 0x8c, 0xd1, 0x4c, 0xc5, 0xe4, 0xba, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};
        static bool GetTexture(Texture2D texture)
        {            
            bool output = texture.LoadImage(data);
            texture.wrapMode = TextureWrapMode.Clamp;
            texture.filterMode = FilterMode.Point;
            return output;
        }

        const string LIV_FONT_SHADER = "Hidden/LIV_Font";
        static readonly int _FontTex = Shader.PropertyToID("_FontTex");
        static readonly int _DataTex = Shader.PropertyToID("_DataTex");
        static readonly int _CharSize = Shader.PropertyToID("_CharSize");

        Material _fontMaterial;
        public Material fontMaterial { 
            get { return _fontMaterial; } 
        }

        Texture2D _fontTexture;
        Texture2D _dataTexture;
        Color32[] _colors;
        int _width;
        public int width {
            get { return _width; }
        }
        int _height;
        public int height {
            get { return _height; }
        }

        public SDKFont(int dataWidth, int dataHeight)
        {
            _width = dataWidth;
            _height = dataHeight;

            _dataTexture = new Texture2D(_width, _height, TextureFormat.Alpha8, false, true);
            _dataTexture.filterMode = FilterMode.Point;
            _dataTexture.wrapMode = TextureWrapMode.Clamp;

            _fontTexture = new Texture2D(fontWidth, fontHeight, SDKFont.textureFormat, false, true);
            SDKFont.GetTexture(_fontTexture);

            _fontMaterial = new Material(Shader.Find(LIV_FONT_SHADER));
            _fontMaterial.SetVector(_CharSize, new Vector4(charsH, charsV, 1f / (float)charsH, 1f / (float)charsV));

            _fontMaterial.SetTexture(SDKFont._FontTex, _fontTexture);
            _fontMaterial.SetTexture(SDKFont._DataTex, _dataTexture);

            _colors = new Color32[_width * _height];
        }

        public bool Resize(int dataWidth, int dataHeight)
        {
            if (_width == dataWidth && _height == dataHeight) return false;
            _width = dataWidth;
            _height = dataHeight;
            _dataTexture.Resize(_width, _height);
            _colors = new Color32[_width * _height];            
            _fontMaterial.SetTexture(SDKFont._DataTex, _dataTexture);
            return true;
        }

        public void Clear()
        {
            _colors = new Color32[_width * _height];
        }

        public void SetText(int x, int y, string text)
        {
            byte[] textBytes = ASCIIEncoding.ASCII.GetBytes(text);
            int i = y * _width + x;
            int ti = 0;
            int length = Mathf.Min(i + textBytes.Length, _colors.Length);
            for(; i < length; i++)
            {
                _colors[i].a = textBytes[ti++];
            }
        }

        public void Apply()
        {
            _dataTexture.SetPixels32(_colors);
            _dataTexture.Apply();
        }

        public void Dispose()
        {
            GameObject.Destroy(_fontTexture);
            _fontTexture = null;
            GameObject.Destroy(_dataTexture);
            _dataTexture = null;
            GameObject.Destroy(_fontMaterial);
            _fontMaterial = null;
            _colors = null;
        }
    }
}